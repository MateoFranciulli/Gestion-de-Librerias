
/*
    Autores:
    Mateo Franciulli 310956
    Ivan Castelli 306188
 */

package interfaz;

import dominio.Libro;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import dominio.Modelo;
import dominio.Ventas;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class VentanaRegistrarVentas extends javax.swing.JFrame implements Observer {
    //private int factura;
    private Modelo modelo;
    public ArrayList<Libro> listaVentas = new ArrayList<>();
    
    /**
     * Creates new form VentanaRegistro
     */
    public VentanaRegistrarVentas(Modelo modelo) {
        this.modelo=modelo;
        initComponents();
        cargarListaLibros();
        fechaActual();
        cargarTotal();
        
        txtFactura.setText(modelo.getNumeroFactura()+"");//que no se pueda tocar
        
        modelo.addObserver(this);
    }
    
 
    private void cargarListaLibros() {
    // Ordena los libros por título y luego combina ISBN y título
    jlLibros.setListData(modelo.getLibros().stream()
        .sorted((libro1, libro2) -> libro1.getTitulo().compareToIgnoreCase(libro2.getTitulo()))
        .map(libro -> libro.getIsbn() + " - " + libro.getTitulo())
        .toArray(String[]::new));
    
    }
            
            
    private void actualizarListaVentas() {
    String[] datos = listaVentas.stream()
        .map(libro -> libro.getCantidadVendido() + " - " + libro.getTitulo()+ " - $" + libro.getPrecioVenta())
        .toArray(String[]::new);
    jlVenta.setListData(datos);
    }
    
    private void cargarTotal() {
        double total = 0.0;
        double cantidad = 0;
        Iterator<Libro> iterador = listaVentas.iterator();
    
        while (iterador.hasNext()) {
            Libro libro = iterador.next();
            cantidad = libro.getPrecioVenta() * libro.getCantidadVendido();
            total += cantidad; // Sumar el precio de venta de cada libro
            cantidad=0;

            //si aprieto el boton derecha con un libro ya seleccinoado lo sumo de nuevo
            
        }
    
        lblTotal.setText("Total: $" + total);
    }
    private double obtenerTotalNumerico() {
        // Obtener el texto actual del lblTotal
        String textoTotal = lblTotal.getText();

        // Eliminar el prefijo "Total: $" y convertir el resto a double
        return Double.parseDouble(textoTotal.replace("Total: $", "").trim());
        /*catch (NumberFormatException e) {
        // Manejo de errores si el texto no es convertible
        JOptionPane.showMessageDialog(this, "Error al obtener el total numérico.", "Error", JOptionPane.ERROR_MESSAGE);
        return 0.0;
        }*/
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRegistroAutor = new javax.swing.JLabel();
        lblFactura = new javax.swing.JLabel();
        lblVenta = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        lblLibros = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlLibros = new javax.swing.JList<>();
        lblCliente1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlVenta = new javax.swing.JList<>();
        btnDerecha = new javax.swing.JButton();
        btnIzquierda = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        txtFactura = new javax.swing.JLabel();
        txtFecha = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setTitle("Registro de Ventas");

        lblRegistroAutor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblRegistroAutor.setText("Registro de ventas");
        lblRegistroAutor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblFactura.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblFactura.setText("Factura:");
        lblFactura.setFocusable(false);

        lblVenta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblVenta.setText("Venta :");
        lblVenta.setFocusable(false);

        lblFecha.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblFecha.setText("Fecha :");
        lblFecha.setFocusable(false);

        lblLibros.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblLibros.setText("Libros :");
        lblLibros.setFocusable(false);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jlLibros);

        lblCliente1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCliente1.setText("Cliente :");
        lblCliente1.setFocusable(false);

        jlVenta.setMaximumSize(new java.awt.Dimension(258, 147));
        jlVenta.setMinimumSize(new java.awt.Dimension(258, 147));
        jScrollPane2.setViewportView(jlVenta);

        btnDerecha.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDerecha.setText("->");
        btnDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerechaActionPerformed(evt);
            }
        });

        btnIzquierda.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnIzquierda.setText("<-");
        btnIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzquierdaActionPerformed(evt);
            }
        });

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        lblTotal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTotal.setText("Total : ");

        txtFactura.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtFactura.setFocusable(false);

        txtFecha.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtFecha.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLibros, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblRegistroAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDerecha, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnIzquierda, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(btnRegistrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addGap(100, 100, 100))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblRegistroAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblVenta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLibros, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 5, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(btnDerecha)
                                .addGap(38, 38, 38)
                                .addComponent(btnIzquierda)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnRegistrar))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void fechaActual(){
        LocalDate fechaActual = LocalDate.now();
        DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("dd/MM/yyyy", Locale.getDefault());
        txtFecha.setText(fechaActual.format(formatoFecha));
    }
    
    
       
    private void btnDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerechaActionPerformed
    // Obtener el libro seleccionado de la lista jlLibros
    String seleccionado = jlLibros.getSelectedValue();
    
    if (seleccionado == null) {
        // No se seleccionó ningún libro
       JOptionPane.showMessageDialog(this, "Seleccione libro ", "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Extraer el ISBN de la selección (suponiendo que el formato es "ISBN-Título")
    String isbn = seleccionado.split("-")[0].trim();

    // Buscar el libro en el modelo usando el ISBN
    Libro libroEncontrado = modelo.getLibros().stream()
        .filter(libro -> libro.getIsbn().equals(isbn))
        .findFirst().orElse(null);


    // Evitar duplicados en listaVentas
    if (listaVentas.contains(libroEncontrado)) {
        libroEncontrado.setCantidadVendido(libroEncontrado.getCantidadVendido() + 1);
        //libroEncontrado.setEjemplares(libroEncontrado.getEjemplares() - 1);
        
    }else{
    libroEncontrado.setCantidadVendido(0);    
    // Agregar el libro a la lista de ventas
    libroEncontrado.setCantidadVendido(libroEncontrado.getCantidadVendido() + 1);
    //libroEncontrado.setEjemplares(libroEncontrado.getEjemplares() - 1);
    listaVentas.add(libroEncontrado);
    
    }

    // Actualizar la lista jlVenta
    actualizarListaVentas();
    cargarTotal();
    }//GEN-LAST:event_btnDerechaActionPerformed

    private void btnIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzquierdaActionPerformed

        int selectedIndex = jlVenta.getSelectedIndex();
            if (selectedIndex != -1) { // osea si hay elementos seleccionados
                Libro libroSeleccionado = listaVentas.get(selectedIndex);
                
                int cantidadActual = libroSeleccionado.getCantidadVendido();

                if (cantidadActual > 1) {
                    libroSeleccionado.setCantidadVendido(cantidadActual - 1);
                    
                } else {
                    
                    listaVentas.remove(selectedIndex);
                }


                //libroSeleccionado.setEjemplares(libroSeleccionado.getEjemplares() + 1);
                
                actualizarListaVentas();
                cargarTotal();
            }
    }//GEN-LAST:event_btnIzquierdaActionPerformed

    
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
    String fecha = txtFecha.getText();
    String cliente = txtCliente.getText();
    int cantidad = 0;

    if (listaVentas.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Seleccione los libros vendidos", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    StringBuilder mensajeStock = new StringBuilder();
    ArrayList<Libro> librosSinStock = new ArrayList<>();

    for (Libro libro : listaVentas) {
        if (libro.getEjemplares() < libro.getCantidadVendido()) {
            mensajeStock.append("No hay suficiente stock para el libro: ").append(libro.getTitulo())
                    .append(". Disponible: ").append(libro.getEjemplares()).append(", Solicitado: ")
                    .append(libro.getCantidadVendido()).append("\n");
            libro.setCantidadVendido(libro.getEjemplares()); // Ajustar a la cantidad disponible
        }
        
        
        
        if (libro.getCantidadVendido() == 0) {
            librosSinStock.add(libro); // Añadir a la lista de libros sin stock
        }
    }

    for (Libro libro : listaVentas) {
    libro.setCantidadVendido(libro.getCantidadVendido()); // Actualiza la cantidad vendida
}
    listaVentas.removeAll(librosSinStock); // Eliminar libros sin stock de listaVentas

    if (listaVentas.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No hay stock suficiente para realizar la venta.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    } else if (mensajeStock.length() > 0) {
        JOptionPane.showMessageDialog(this, mensajeStock.toString(), "Stock Insuficiente", JOptionPane.WARNING_MESSAGE);
    } else {
        ArrayList<Libro> ventasAGuardar = new ArrayList<>();
        for (Libro libro : listaVentas) {
            // Crear una nueva instancia de Libro para ventasAGuardar
            Libro libroVenta = new Libro(libro.getIsbn(), libro.getTitulo(), libro.getPrecioCosto(), 
                                         libro.getPrecioVenta(), libro.getEjemplares(), libro.getEditorial(), 
                                         libro.getGenero(), libro.getAutor(), libro.getCantidadVendido(), 
                                         libro.getCantidadVendido(), libro.getFoto());

            ventasAGuardar.add(libroVenta);
        }

        Ventas venta = new Ventas(fecha, cliente, obtenerTotalNumerico(), modelo.getNumeroFactura(), cantidad, ventasAGuardar);
        modelo.agregarVentas(venta);

        for (Libro libro : listaVentas) {
            libro.setEjemplares(libro.getEjemplares() - libro.getCantidadVendido()); // Descontar del stock
            libro.setCantidadVendido(0); // Reiniciar la cantidad vendida
        }

        JOptionPane.showMessageDialog(null, "Venta realizada:\n" + venta);
        modelo.incrementarNumeroFactura();
        txtFactura.setText(modelo.getNumeroFactura() + "");
        txtCliente.setText("");
        listaVentas.clear();
        actualizarListaVentas();
        cargarTotal();
    }
   
        
    }//GEN-LAST:event_btnRegistrarActionPerformed
    
    
    
    private void borrarCantidadVentas(){
        Iterator<Libro> iterador = listaVentas.iterator();
           while (iterador.hasNext()) {
                     
            Libro libro = iterador.next();
            libro.setCantidadVendido(0);                                          
            
        }
    }
    
    
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        txtFactura.setText("");
        txtCliente.setText("");
        borrarCantidadVentas();
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    
    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof Modelo) {
            // Actualizar la lista de libros cuando el modelo cambie
            cargarListaLibros();
            cargarTotal();
        }
    }
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnDerecha;
    private javax.swing.JButton btnIzquierda;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> jlLibros;
    private javax.swing.JList<String> jlVenta;
    private javax.swing.JLabel lblCliente1;
    private javax.swing.JLabel lblFactura;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblLibros;
    private javax.swing.JLabel lblRegistroAutor;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblVenta;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JLabel txtFactura;
    private javax.swing.JLabel txtFecha;
    // End of variables declaration//GEN-END:variables


}
